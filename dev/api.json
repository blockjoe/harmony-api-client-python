{
  "info": {
    "description": "Harmony API",
    "title": "Harmony",
    "version": "2.0.0"
  },
  "paths": {
    "/hmyv2_call": {
      "post": {
        "tags": [
          "Smart Contract"
        ],
        "description": "Executes a smart contract code without saving state",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return value of the executed smart contract",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_estimateGas": {
      "post": {
        "tags": [
          "Smart Contract"
        ],
        "description": "Executes a smart contract transction without created a transaction and saving data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateGasRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hex of estimated gas price of smart contract call",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateGasResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getCode": {
      "post": {
        "tags": [
          "Smart Contract"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCodeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getStorageAt": {
      "post": {
        "tags": [
          "Smart Contract"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStorageAtRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data stored at the smart contract location",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStorageAtResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getDelegationsByDelegator": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDelegationByDelegatorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getDelegationsByDelegatorByBlockNumber": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDelegationsByDelegatorByBlockNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegationListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getDelegationsByValidator": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDelegationsByValidatorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorInformationListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getAllValidatorAddresses": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllValidatorAddressesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of wallet addresses that have created validators on the network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getAllValidatorInformation": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllValidatorInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorInformationListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getAllValidatorInformationByBlockNumber": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllValidatorInformationByBlockNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "NOTE: metrics field is overwritten & will always display current epoch data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorInformationListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getElectedValidatorAddresses": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetElectedValidatorAddressesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of wallet addresses that are currently elected",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getValidatorInformation": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetValidatorInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidatorInformationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getCurrentUtilityMetrics": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCurrentUtilityMetricsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentUtilityMetricsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getMedianRawStakeSnapshot": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetMedianRawStakeSnapshotRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMedianRawStakeSnapshotResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getStakingNetworkInfo": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStakingNetworkInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStakingNetworkInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getSuperCommittees": {
      "post": {
        "tags": [
          "Staking"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSuperCommitteesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSuperCommitteesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getCXReceiptByHash": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "description": "Query the CX receipt hash on the receiving shard endpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCXReceiptByHashRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCXReceiptByHashResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getPendingCXReceipts": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPendingCXReceiptsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPendingCXReceiptsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_resendCX": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "description": "Use this API call to resend the cross shard receipt to the receiving shard to re-process if the transaction did not pay out ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendCXRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If cross shard receipt was successfully resent or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResendCXResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getPoolStats": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPoolStatsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPoolStatsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_pendingStakingTransactions": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PendingStakingTransactionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of staking transactions in the transaction pool",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingTransactionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_pendingTransactions": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PendingTransactionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of regular & smart contract transactions in the transaction pool",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getCurrentStakingErrorSink": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCurrentStakingErrorSinkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "staking transaction hash - if the transaction has been added to the pool - else - error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentStakingErrorSinkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getStakingTransactionByBlockNumberAndIndex": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStakingTransactionByBlockNumberAndIndexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getStakingTransactionByBlockHashAndIndex": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStakingTransactionByBlockHashAndIndexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getStakingTransactionByHash": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStakingTransactionByHashRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StakingTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_sendRawStakingTransaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRawStakingTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendRawStakingTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getCurrentTransactionErrorSink": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCurrentTransactionErrorSinkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentTransactionErrorSinkResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getTransactionByBlockHashAndIndex": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionByBlockHashAndIndexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getTransactionByBlockNumberAndIndex": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionByBlockNumberAndIndexRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getTransactionByHash": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionByHashRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getTransactionReceipt": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionReceiptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransactionReceiptResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_sendRawTransaction": {
      "post": {
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendRawTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "staking transaction hash - if the transaction has been added to the pool - else - error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendRawTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_blockNumber": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Current block number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockNumberResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getCirculatingSupply": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCirculatingSupplyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Circulation supply of tokens in ONE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCirculatingSupplyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getEpoch": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEpochRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Current block number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEpochResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getLastCrossLinks": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetLastCrossLinksRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLastCrossLinksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getLeader": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetLeaderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet address of current leader",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLeaderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_gasPrice": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GasPriceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Current average gas price of transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GasPriceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getShardingStructure": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetShardingStructureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetShardingStructureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getTotalSupply": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTotalSupplyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Total number of pre-mined tokens",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTotalSupplyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getValidators": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetValidatorsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetValidatorsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getValidatorKeys": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetValidatorKeysRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of public BLS keys in the elected committee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BLSKeyListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getCurrentBadBlocks": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "description": "Known issues with RPC not returning correctly",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCurrentBadBlocksRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of bad blocks in node memory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentBadBlocksResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getNodeMetadata": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetNodeMetadataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNodeMetadataResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_protocolVersion": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProtocolVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Protocol version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtocolVersionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/net_peerCount": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeerCountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Number of peers represented as a Hex string",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeerCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getBlocks": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBlocksRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of blocks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getBlockByNumber": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBlockByNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getBlockByHash": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBlockByHashRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getBlockSigners": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBlockSignersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of block signer wallet addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getBlockSignersKeys": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBlockSignersKeysRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of block signer public BLS keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BLSKeyListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getBlockTransactionCountByNumber": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBlockTransactionCountByNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Number of transactions in block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getBlockTransactionCountByHash": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBlockTransactionCountByHashRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Number of transactions in block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getHeaderByNumber": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetHeaderByNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Number of transactions in block",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeaderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getLatestChainHeaders": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetLatestChainHeadersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLatestChainHeadersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_latestHeader": {
      "post": {
        "tags": [
          "Blockchain"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LatestHeaderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeaderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getBalance": {
      "post": {
        "tags": [
          "Account"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet balance at given block in Atto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getBalanceByBlockNumber": {
      "post": {
        "tags": [
          "Account"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetBalanceByBlockNumberRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet balance at given block in Atto",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getStakingTransactionsCount": {
      "post": {
        "tags": [
          "Account"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStakingTransactionsCountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Number of staking transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getStakingTransactionsHistory": {
      "post": {
        "tags": [
          "Account"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStakingTransactionsHistoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If txType was False, only the hashes will be provided as opposed to the whole transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TransactionsHashListResponse"
                    },
                    {
                      "$ref": "#/components/schemas/StakingTransactionListResponse"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getTransactionsCount": {
      "post": {
        "tags": [
          "Account"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionsCountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Number of transactions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/hmyv2_getTransactionsHistory": {
      "post": {
        "tags": [
          "Account"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTransactionsHistoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If txType was False, only the hashes will be provided as opposed to the whole transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TransactionsHashListResponse"
                    },
                    {
                      "$ref": "#/components/schemas/TransactionListResponse"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "openapi": "3.0.3",
  "components": {
    "schemas": {
      "CallRequest": {
        "title": "CallRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_call",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/SmartContractCall"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ],
        "definitions": {
          "SmartContractCall": {
            "title": "SmartContractCall",
            "type": "object",
            "properties": {
              "to": {
                "title": "To",
                "description": "Smart contract address",
                "type": "string"
              },
              "from": {
                "title": "From",
                "description": "Wallet address",
                "type": "string"
              },
              "gas": {
                "title": "Gas",
                "description": "Gas to execute the smart contract call",
                "type": "integer"
              },
              "gasPrice": {
                "title": "Gasprice",
                "description": "Gas price to execute smart contract call",
                "type": "integer"
              },
              "value": {
                "title": "Value",
                "description": "Value sent with the smart contract call",
                "type": "integer"
              },
              "data": {
                "title": "Data",
                "description": "Hash of smart contract method and parameters",
                "type": "string"
              }
            },
            "required": [
              "to"
            ]
          }
        }
      },
      "CallResponse": {
        "title": "CallResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Return value of the executed smart contract",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "EstimateGasRequest": {
        "title": "EstimateGasRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_estimateGas",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/SmartContractCall"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ],
        "definitions": {
          "SmartContractCall": {
            "title": "SmartContractCall",
            "type": "object",
            "properties": {
              "to": {
                "title": "To",
                "description": "Smart contract address",
                "type": "string"
              },
              "from": {
                "title": "From",
                "description": "Wallet address",
                "type": "string"
              },
              "gas": {
                "title": "Gas",
                "description": "Gas to execute the smart contract call",
                "type": "integer"
              },
              "gasPrice": {
                "title": "Gasprice",
                "description": "Gas price to execute smart contract call",
                "type": "integer"
              },
              "value": {
                "title": "Value",
                "description": "Value sent with the smart contract call",
                "type": "integer"
              },
              "data": {
                "title": "Data",
                "description": "Hash of smart contract method and parameters",
                "type": "string"
              }
            },
            "required": [
              "to"
            ]
          }
        }
      },
      "EstimateGasResponse": {
        "title": "EstimateGasResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Hex of estimated gas price of smart contract call",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetCodeRequest": {
        "title": "GetCodeRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getCode",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "anyOf": [
              {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "GetCodeResponse": {
        "title": "GetCodeResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "The data at given address address",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetStorageAtRequest": {
        "title": "GetStorageAtRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getStorageAt",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "GetStorageAtResponse": {
        "title": "GetStorageAtResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Data stored at the smart contract location",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetDelegationByDelegatorRequest": {
        "title": "GetDelegationByDelegatorRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getDelegationsByDelegator",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "DelegationListResponse": {
        "title": "DelegationListResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of Delegation Objects",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Delegation"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "Delegation": {
            "title": "Delegation",
            "type": "object",
            "properties": {
              "validator_address": {
                "title": "Validator Address",
                "description": "Validator wallet address",
                "type": "string"
              },
              "delegator_address": {
                "title": "Delegator Address",
                "description": "Delegator wallet address",
                "type": "string"
              },
              "amount": {
                "title": "Amount",
                "description": "Amount delegated in atto",
                "type": "integer"
              },
              "reward": {
                "title": "Reward",
                "description": "Unclaimed rewards in atto",
                "type": "integer"
              },
              "Undelegations": {
                "title": "Undelegations",
                "description": "List of pending undelegations",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "required": [
              "validator_address",
              "delegator_address",
              "amount",
              "reward",
              "Undelegations"
            ]
          }
        }
      },
      "GetDelegationsByDelegatorByBlockNumberRequest": {
        "title": "GetDelegationsByDelegatorByBlockNumberRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getDelegationsByDelegatorByBlockNumber",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "GetDelegationsByValidatorRequest": {
        "title": "GetDelegationsByValidatorRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getDelegationsByValidator",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "ValidatorInformationListResponse": {
        "title": "ValidatorInformationListResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of ValidatorInformation Objects",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ValidatorInformation"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "ValidatorDelegation": {
            "title": "ValidatorDelegation",
            "type": "object",
            "properties": {
              "delegator-address": {
                "title": "Delegator-Address",
                "description": "Delegator wallet address",
                "type": "string"
              },
              "amount": {
                "title": "Amount",
                "description": "Amount delegated in atto",
                "type": "integer"
              },
              "reward": {
                "title": "Reward",
                "description": "Unclaimed rewards in atto",
                "type": "integer"
              },
              "undelegations": {
                "title": "Undelegations",
                "description": "List of pending undelegations",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "required": [
              "delegator-address",
              "amount",
              "reward",
              "undelegations"
            ]
          },
          "Validator": {
            "title": "Validator",
            "type": "object",
            "properties": {
              "bls-public-keys": {
                "title": "Bls-Public-Keys",
                "description": "List of public BLS keys associated with the validator wallet address",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "creation-height": {
                "title": "Creation-Height",
                "description": "Block in which the validator was created",
                "type": "integer"
              },
              "address": {
                "title": "Address",
                "description": "Validator wallet address",
                "type": "string"
              },
              "delegations": {
                "title": "Delegations",
                "description": "List of Delegation Objects",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ValidatorDelegation"
                }
              },
              "details": {
                "title": "Details",
                "description": "Validator details, displayed on the Staking Dashboard",
                "type": "string"
              },
              "identity": {
                "title": "Identity",
                "description": "Validator identity, must be unique",
                "type": "string"
              },
              "last-epoch-in-committee": {
                "title": "Last-Epoch-In-Committee",
                "description": "Last epoch any key of the validator was elected",
                "type": "integer"
              },
              "max-change-rate": {
                "title": "Max-Change-Rate",
                "description": "Maximum amount the commission rate can increase in one epoch",
                "type": "string"
              },
              "max-rate": {
                "title": "Max-Rate",
                "description": "Max commission rate a validator can charge",
                "type": "string"
              },
              "min-self-delegation": {
                "title": "Min-Self-Delegation",
                "description": "Ammount that validator must delegate to self in Atto",
                "type": "integer"
              },
              "max-total-delegation": {
                "title": "Max-Total-Delegation",
                "description": "Total amount that validator will accept delegation until in Atto",
                "type": "integer"
              },
              "name": {
                "title": "Name",
                "description": "Validator name, displayed on the Staking Dashboard",
                "type": "string"
              },
              "rate": {
                "title": "Rate",
                "description": "Current commission rate",
                "type": "string"
              },
              "security-contact": {
                "title": "Security-Contact",
                "description": "Method to contact the validator",
                "type": "string"
              },
              "update-height": {
                "title": "Update-Height",
                "description": "Last block validator editted their validator information",
                "type": "integer"
              },
              "website": {
                "title": "Website",
                "description": "Validator website, displayed on the Staking Dashboard",
                "type": "string"
              }
            },
            "required": [
              "bls-public-keys",
              "creation-height",
              "address",
              "delegations",
              "details",
              "identity",
              "last-epoch-in-committee",
              "max-change-rate",
              "max-rate",
              "min-self-delegation",
              "max-total-delegation",
              "name",
              "rate",
              "security-contact",
              "update-height",
              "website"
            ]
          },
          "Key": {
            "title": "Key",
            "type": "object",
            "properties": {
              "bls-public-key": {
                "title": "Bls-Public-Key",
                "description": "BLS public key",
                "type": "string"
              },
              "group-percent": {
                "title": "Group-Percent",
                "description": "Key voting power in shard",
                "type": "string"
              },
              "effective-stake": {
                "title": "Effective-Stake",
                "description": "Effective stake of key",
                "type": "string"
              },
              "raw-stake": {
                "title": "Raw-Stake",
                "description": "Actual stake of key",
                "type": "string"
              },
              "earning-account": {
                "title": "Earning-Account",
                "description": "Validator wallet address",
                "type": "string"
              },
              "overall-percent": {
                "title": "Overall-Percent",
                "description": "Percent of effective stake",
                "type": "string"
              },
              "shard-id": {
                "title": "Shard-Id",
                "description": "Shard ID that key is on",
                "type": "integer"
              }
            },
            "required": [
              "bls-public-key",
              "group-percent",
              "effective-stake",
              "raw-stake",
              "earning-account",
              "overall-percent",
              "shard-id"
            ]
          },
          "BlsKey": {
            "title": "BlsKey",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Key"
                  }
                ]
              },
              "earned-reward": {
                "title": "Earned-Reward",
                "description": "Lifetime reward key has earned",
                "type": "integer"
              }
            },
            "required": [
              "key",
              "earned-reward"
            ]
          },
          "Metrics": {
            "title": "Metrics",
            "type": "object",
            "properties": {
              "by-bls-key": {
                "title": "By-Bls-Key",
                "description": "BLS key earning metrics for current epoch",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BlsKey"
                }
              }
            },
            "required": [
              "by-bls-key"
            ]
          },
          "Blocks": {
            "title": "Blocks",
            "type": "object",
            "properties": {
              "to-sign": {
                "title": "To-Sign",
                "description": "Number of blocks available to the validator to sign",
                "type": "integer"
              },
              "signed": {
                "title": "Signed",
                "description": "Number of blocks the validator has signed",
                "type": "integer"
              }
            },
            "required": [
              "to-sign",
              "signed"
            ]
          },
          "EpochAPR": {
            "title": "EpochAPR",
            "type": "object",
            "properties": {
              "epoch": {
                "title": "Epoch",
                "description": "Epoch number",
                "type": "integer"
              },
              "apr": {
                "title": "Apr",
                "description": "Calculated APR for that epoch",
                "type": "number"
              }
            },
            "required": [
              "epoch",
              "apr"
            ]
          },
          "EpochBlock": {
            "title": "EpochBlock",
            "type": "object",
            "properties": {
              "blocks": {
                "$ref": "#/definitions/Blocks"
              },
              "epoch": {
                "title": "Epoch",
                "type": "integer"
              }
            },
            "required": [
              "blocks",
              "epoch"
            ]
          },
          "Lifetime": {
            "title": "Lifetime",
            "type": "object",
            "properties": {
              "reward-accumulated": {
                "title": "Reward-Accumulated",
                "description": "Lifetime reward accumulated by the validator",
                "type": "integer"
              },
              "blocks": {
                "title": "Blocks",
                "description": "Blocks Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Blocks"
                  }
                ]
              },
              "apr": {
                "title": "Apr",
                "description": "Approximate Return Rate",
                "type": "number"
              },
              "epoch-apr": {
                "title": "Epoch-Apr",
                "description": "List of APR per epoch",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EpochAPR"
                }
              },
              "epoch-blocks": {
                "title": "Epoch-Blocks",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EpochBlock"
                }
              }
            },
            "required": [
              "reward-accumulated",
              "blocks",
              "apr"
            ]
          },
          "ValidatorInformation": {
            "title": "ValidatorInformation",
            "type": "object",
            "properties": {
              "validator": {
                "title": "Validator",
                "description": "Validator Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Validator"
                  }
                ]
              },
              "metrics": {
                "title": "Metrics",
                "description": "BLS key earning metrics for current epoch",
                "allOf": [
                  {
                    "$ref": "#/definitions/Metrics"
                  }
                ]
              },
              "total-delegation": {
                "title": "Total-Delegation",
                "description": "Total amount delegated to validator",
                "type": "integer"
              },
              "currently-in-committee": {
                "title": "Currently-In-Committee",
                "description": "If key is currently elected",
                "type": "boolean"
              },
              "epos-status": {
                "title": "Epos-Status",
                "description": "Currently elected, eligible to be elected next epoch, or not eligible to be elected next epoch",
                "type": "string"
              },
              "epos-winning-stake": {
                "title": "Epos-Winning-Stake",
                "description": "Total effective stake of the validator",
                "type": "number"
              },
              "booted-status": {
                "title": "Booted-Status",
                "description": "Banned status",
                "type": "string"
              },
              "active-status": {
                "title": "Active-Status",
                "description": "Active or inactive",
                "type": "string"
              },
              "lifetime": {
                "title": "Lifetime",
                "description": "Lifetime Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Lifetime"
                  }
                ]
              }
            },
            "required": [
              "validator",
              "total-delegation",
              "currently-in-committee",
              "epos-status",
              "active-status",
              "lifetime"
            ]
          }
        }
      },
      "GetAllValidatorAddressesRequest": {
        "title": "GetAllValidatorAddressesRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getAllValidatorAddresses",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddressListResponse": {
        "title": "AddressListResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of addresses",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetAllValidatorInformationRequest": {
        "title": "GetAllValidatorInformationRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getAllValidatorInformation",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "GetAllValidatorInformationByBlockNumberRequest": {
        "title": "GetAllValidatorInformationByBlockNumberRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getAllValidatorInformationByBlockNumber",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "GetElectedValidatorAddressesRequest": {
        "title": "GetElectedValidatorAddressesRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getElectedValidatorAddresses",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetValidatorInformationRequest": {
        "title": "GetValidatorInformationRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "description": "The method to call out to.",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "method",
          "params"
        ]
      },
      "ValidatorInformationResponse": {
        "title": "ValidatorInformationResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Validator Object",
            "allOf": [
              {
                "$ref": "#/definitions/ValidatorInformation"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "ValidatorDelegation": {
            "title": "ValidatorDelegation",
            "type": "object",
            "properties": {
              "delegator-address": {
                "title": "Delegator-Address",
                "description": "Delegator wallet address",
                "type": "string"
              },
              "amount": {
                "title": "Amount",
                "description": "Amount delegated in atto",
                "type": "integer"
              },
              "reward": {
                "title": "Reward",
                "description": "Unclaimed rewards in atto",
                "type": "integer"
              },
              "undelegations": {
                "title": "Undelegations",
                "description": "List of pending undelegations",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "required": [
              "delegator-address",
              "amount",
              "reward",
              "undelegations"
            ]
          },
          "Validator": {
            "title": "Validator",
            "type": "object",
            "properties": {
              "bls-public-keys": {
                "title": "Bls-Public-Keys",
                "description": "List of public BLS keys associated with the validator wallet address",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "creation-height": {
                "title": "Creation-Height",
                "description": "Block in which the validator was created",
                "type": "integer"
              },
              "address": {
                "title": "Address",
                "description": "Validator wallet address",
                "type": "string"
              },
              "delegations": {
                "title": "Delegations",
                "description": "List of Delegation Objects",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ValidatorDelegation"
                }
              },
              "details": {
                "title": "Details",
                "description": "Validator details, displayed on the Staking Dashboard",
                "type": "string"
              },
              "identity": {
                "title": "Identity",
                "description": "Validator identity, must be unique",
                "type": "string"
              },
              "last-epoch-in-committee": {
                "title": "Last-Epoch-In-Committee",
                "description": "Last epoch any key of the validator was elected",
                "type": "integer"
              },
              "max-change-rate": {
                "title": "Max-Change-Rate",
                "description": "Maximum amount the commission rate can increase in one epoch",
                "type": "string"
              },
              "max-rate": {
                "title": "Max-Rate",
                "description": "Max commission rate a validator can charge",
                "type": "string"
              },
              "min-self-delegation": {
                "title": "Min-Self-Delegation",
                "description": "Ammount that validator must delegate to self in Atto",
                "type": "integer"
              },
              "max-total-delegation": {
                "title": "Max-Total-Delegation",
                "description": "Total amount that validator will accept delegation until in Atto",
                "type": "integer"
              },
              "name": {
                "title": "Name",
                "description": "Validator name, displayed on the Staking Dashboard",
                "type": "string"
              },
              "rate": {
                "title": "Rate",
                "description": "Current commission rate",
                "type": "string"
              },
              "security-contact": {
                "title": "Security-Contact",
                "description": "Method to contact the validator",
                "type": "string"
              },
              "update-height": {
                "title": "Update-Height",
                "description": "Last block validator editted their validator information",
                "type": "integer"
              },
              "website": {
                "title": "Website",
                "description": "Validator website, displayed on the Staking Dashboard",
                "type": "string"
              }
            },
            "required": [
              "bls-public-keys",
              "creation-height",
              "address",
              "delegations",
              "details",
              "identity",
              "last-epoch-in-committee",
              "max-change-rate",
              "max-rate",
              "min-self-delegation",
              "max-total-delegation",
              "name",
              "rate",
              "security-contact",
              "update-height",
              "website"
            ]
          },
          "Key": {
            "title": "Key",
            "type": "object",
            "properties": {
              "bls-public-key": {
                "title": "Bls-Public-Key",
                "description": "BLS public key",
                "type": "string"
              },
              "group-percent": {
                "title": "Group-Percent",
                "description": "Key voting power in shard",
                "type": "string"
              },
              "effective-stake": {
                "title": "Effective-Stake",
                "description": "Effective stake of key",
                "type": "string"
              },
              "raw-stake": {
                "title": "Raw-Stake",
                "description": "Actual stake of key",
                "type": "string"
              },
              "earning-account": {
                "title": "Earning-Account",
                "description": "Validator wallet address",
                "type": "string"
              },
              "overall-percent": {
                "title": "Overall-Percent",
                "description": "Percent of effective stake",
                "type": "string"
              },
              "shard-id": {
                "title": "Shard-Id",
                "description": "Shard ID that key is on",
                "type": "integer"
              }
            },
            "required": [
              "bls-public-key",
              "group-percent",
              "effective-stake",
              "raw-stake",
              "earning-account",
              "overall-percent",
              "shard-id"
            ]
          },
          "BlsKey": {
            "title": "BlsKey",
            "type": "object",
            "properties": {
              "key": {
                "title": "Key",
                "description": "Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Key"
                  }
                ]
              },
              "earned-reward": {
                "title": "Earned-Reward",
                "description": "Lifetime reward key has earned",
                "type": "integer"
              }
            },
            "required": [
              "key",
              "earned-reward"
            ]
          },
          "Metrics": {
            "title": "Metrics",
            "type": "object",
            "properties": {
              "by-bls-key": {
                "title": "By-Bls-Key",
                "description": "BLS key earning metrics for current epoch",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BlsKey"
                }
              }
            },
            "required": [
              "by-bls-key"
            ]
          },
          "Blocks": {
            "title": "Blocks",
            "type": "object",
            "properties": {
              "to-sign": {
                "title": "To-Sign",
                "description": "Number of blocks available to the validator to sign",
                "type": "integer"
              },
              "signed": {
                "title": "Signed",
                "description": "Number of blocks the validator has signed",
                "type": "integer"
              }
            },
            "required": [
              "to-sign",
              "signed"
            ]
          },
          "EpochAPR": {
            "title": "EpochAPR",
            "type": "object",
            "properties": {
              "epoch": {
                "title": "Epoch",
                "description": "Epoch number",
                "type": "integer"
              },
              "apr": {
                "title": "Apr",
                "description": "Calculated APR for that epoch",
                "type": "number"
              }
            },
            "required": [
              "epoch",
              "apr"
            ]
          },
          "EpochBlock": {
            "title": "EpochBlock",
            "type": "object",
            "properties": {
              "blocks": {
                "$ref": "#/definitions/Blocks"
              },
              "epoch": {
                "title": "Epoch",
                "type": "integer"
              }
            },
            "required": [
              "blocks",
              "epoch"
            ]
          },
          "Lifetime": {
            "title": "Lifetime",
            "type": "object",
            "properties": {
              "reward-accumulated": {
                "title": "Reward-Accumulated",
                "description": "Lifetime reward accumulated by the validator",
                "type": "integer"
              },
              "blocks": {
                "title": "Blocks",
                "description": "Blocks Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Blocks"
                  }
                ]
              },
              "apr": {
                "title": "Apr",
                "description": "Approximate Return Rate",
                "type": "number"
              },
              "epoch-apr": {
                "title": "Epoch-Apr",
                "description": "List of APR per epoch",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EpochAPR"
                }
              },
              "epoch-blocks": {
                "title": "Epoch-Blocks",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EpochBlock"
                }
              }
            },
            "required": [
              "reward-accumulated",
              "blocks",
              "apr"
            ]
          },
          "ValidatorInformation": {
            "title": "ValidatorInformation",
            "type": "object",
            "properties": {
              "validator": {
                "title": "Validator",
                "description": "Validator Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Validator"
                  }
                ]
              },
              "metrics": {
                "title": "Metrics",
                "description": "BLS key earning metrics for current epoch",
                "allOf": [
                  {
                    "$ref": "#/definitions/Metrics"
                  }
                ]
              },
              "total-delegation": {
                "title": "Total-Delegation",
                "description": "Total amount delegated to validator",
                "type": "integer"
              },
              "currently-in-committee": {
                "title": "Currently-In-Committee",
                "description": "If key is currently elected",
                "type": "boolean"
              },
              "epos-status": {
                "title": "Epos-Status",
                "description": "Currently elected, eligible to be elected next epoch, or not eligible to be elected next epoch",
                "type": "string"
              },
              "epos-winning-stake": {
                "title": "Epos-Winning-Stake",
                "description": "Total effective stake of the validator",
                "type": "number"
              },
              "booted-status": {
                "title": "Booted-Status",
                "description": "Banned status",
                "type": "string"
              },
              "active-status": {
                "title": "Active-Status",
                "description": "Active or inactive",
                "type": "string"
              },
              "lifetime": {
                "title": "Lifetime",
                "description": "Lifetime Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/Lifetime"
                  }
                ]
              }
            },
            "required": [
              "validator",
              "total-delegation",
              "currently-in-committee",
              "epos-status",
              "active-status",
              "lifetime"
            ]
          }
        }
      },
      "GetCurrentUtilityMetricsRequest": {
        "title": "GetCurrentUtilityMetricsRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getCurrentUtilityMetrics",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetCurrentUtilityMetricsResponse": {
        "title": "GetCurrentUtilityMetricsResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "UtilityMetrics Object",
            "allOf": [
              {
                "$ref": "#/definitions/UtilityMetrics"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "UtilityMetrics": {
            "title": "UtilityMetrics",
            "type": "object",
            "properties": {
              "AccumulatorSnapshot": {
                "title": "Accumulatorsnapshot",
                "description": "Total block reward given out in Atto",
                "type": "integer"
              },
              "CurrentStakedPercentage": {
                "title": "Currentstakedpercentage",
                "description": "Percent of circulationg supply staked",
                "type": "string"
              },
              "Deviation": {
                "title": "Deviation",
                "description": "Change in percent of circulating supply staked",
                "type": "string"
              },
              "Adjustment": {
                "title": "Adjustment",
                "description": "Change in circulationg supply staked",
                "type": "string"
              }
            },
            "required": [
              "AccumulatorSnapshot",
              "CurrentStakedPercentage",
              "Deviation",
              "Adjustment"
            ]
          }
        }
      },
      "GetMedianRawStakeSnapshotRequest": {
        "title": "GetMedianRawStakeSnapshotRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getMedianRawStakeSnapshot",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetMedianRawStakeSnapshotResponse": {
        "title": "GetMedianRawStakeSnapshotResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "MedianRawStakeSnapshot Object",
            "allOf": [
              {
                "$ref": "#/definitions/MedianRawStakeSnapshot"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "EposSlotWinners": {
            "title": "EposSlotWinners",
            "type": "object",
            "properties": {
              "slot-owner": {
                "title": "Slot-Owner",
                "description": "Wallet address of BLS key",
                "type": "string"
              },
              "bls-public-key": {
                "title": "Bls-Public-Key",
                "description": "BLS public key",
                "type": "string"
              },
              "raw-stake": {
                "title": "Raw-Stake",
                "description": "Actual stake",
                "type": "string"
              },
              "eposed-stake": {
                "title": "Eposed-Stake",
                "description": "Effective stake",
                "type": "string"
              }
            },
            "required": [
              "slot-owner",
              "bls-public-key",
              "raw-stake",
              "eposed-stake"
            ]
          },
          "EposSlotCandidates": {
            "title": "EposSlotCandidates",
            "type": "object",
            "properties": {
              "stake": {
                "title": "Stake",
                "description": "Actual stake in Atto",
                "type": "integer"
              },
              "keys-at-auction": {
                "title": "Keys-At-Auction",
                "description": "List of BLS public keys",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "percentage-of-total-auction-stake": {
                "title": "Percentage-Of-Total-Auction-Stake",
                "description": "Percent of total network stake",
                "type": "string"
              },
              "stake-per-key": {
                "title": "Stake-Per-Key",
                "description": "Stake per BLS key in Atto",
                "type": "integer"
              },
              "validator": {
                "title": "Validator",
                "description": "Wallet address of validator",
                "type": "string"
              }
            },
            "required": [
              "stake",
              "keys-at-auction",
              "percentage-of-total-auction-stake",
              "stake-per-key",
              "validator"
            ]
          },
          "MedianRawStakeSnapshot": {
            "title": "MedianRawStakeSnapshot",
            "type": "object",
            "properties": {
              "epos-median-stake": {
                "title": "Epos-Median-Stake",
                "description": "Effective median stake",
                "type": "string"
              },
              "max-external-slots": {
                "title": "Max-External-Slots",
                "description": "Number of available committee slots",
                "type": "integer"
              },
              "epos-slot-winners": {
                "title": "Epos-Slot-Winners",
                "description": "Details for each slot winner",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EposSlotWinners"
                }
              },
              "epos-slot-candidates": {
                "title": "Epos-Slot-Candidates",
                "description": "Details for each candidates",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EposSlotCandidates"
                }
              }
            },
            "required": [
              "epos-median-stake",
              "max-external-slots",
              "epos-slot-winners",
              "epos-slot-candidates"
            ]
          }
        }
      },
      "GetStakingNetworkInfoRequest": {
        "title": "GetStakingNetworkInfoRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getStakingNetworkInfoRequest",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetStakingNetworkInfoResponse": {
        "title": "GetStakingNetworkInfoResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "StakingNetworkInfo Object",
            "allOf": [
              {
                "$ref": "#/definitions/StakingNetworkInfo"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "StakingNetworkInfo": {
            "title": "StakingNetworkInfo",
            "type": "object",
            "properties": {
              "total-supply": {
                "title": "Total-Supply",
                "description": "Total number of pre-mined tokens",
                "type": "string"
              },
              "circulating-supply": {
                "title": "Circulating-Supply",
                "description": "Number of token available in the network",
                "type": "string"
              },
              "epoch-last-block": {
                "title": "Epoch-Last-Block",
                "description": "Last block of epoch",
                "type": "integer"
              },
              "total-staking": {
                "title": "Total-Staking",
                "description": "Total amount staked in Atto",
                "type": "integer"
              },
              "median-raw-stake": {
                "title": "Median-Raw-Stake",
                "description": "Effective median stake in Atto",
                "type": "string"
              }
            },
            "required": [
              "total-supply",
              "circulating-supply",
              "epoch-last-block",
              "total-staking",
              "median-raw-stake"
            ]
          }
        }
      },
      "GetSuperCommitteesRequest": {
        "title": "GetSuperCommitteesRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getSuperCommittess",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetSuperCommitteesResponse": {
        "title": "GetSuperCommitteesResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "SuperCommittees Object",
            "allOf": [
              {
                "$ref": "#/definitions/SuperCommittees"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "CommitteeMember": {
            "title": "CommitteeMember",
            "type": "object",
            "properties": {
              "is-harmony-slot": {
                "title": "Is-Harmony-Slot",
                "description": "If slot is Harmony owned",
                "type": "boolean"
              },
              "earning-account": {
                "title": "Earning-Account",
                "description": "Wallet address that rewards are being paid to",
                "type": "string"
              },
              "bls-public-key": {
                "title": "Bls-Public-Key",
                "description": "BLS public key",
                "type": "string"
              },
              "voting-power-unnormalized": {
                "title": "Voting-Power-Unnormalized",
                "description": "Voting power of key",
                "type": "string"
              },
              "voting-power-%": {
                "title": "Voting-Power-%",
                "description": "Normalized voting power of key",
                "type": "string"
              }
            },
            "required": [
              "is-harmony-slot",
              "earning-account",
              "bls-public-key",
              "voting-power-unnormalized",
              "voting-power-%"
            ]
          },
          "CommitteeShard": {
            "title": "CommitteeShard",
            "type": "object",
            "properties": {
              "policy": {
                "title": "Policy",
                "description": "Current election policy",
                "type": "string"
              },
              "count": {
                "title": "Count",
                "description": "Number of BLS keys on shard",
                "type": "integer"
              },
              "external-validator-slot-count": {
                "title": "External-Validator-Slot-Count",
                "description": "Number of external BLS keys in committee",
                "type": "integer"
              },
              "committee-members": {
                "title": "Committee-Members",
                "description": "List of Committee Member Objects",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CommitteeMember"
                }
              }
            },
            "required": [
              "policy",
              "count",
              "external-validator-slot-count",
              "committee-members"
            ]
          },
          "ElectedCommittee": {
            "title": "ElectedCommittee",
            "type": "object",
            "properties": {
              "quorum-deciders": {
                "title": "Quorum-Deciders",
                "description": "Shard of committee",
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/definitions/CommitteeShard"
                }
              }
            },
            "required": [
              "quorum-deciders"
            ]
          },
          "SuperCommittees": {
            "title": "SuperCommittees",
            "type": "object",
            "properties": {
              "previous": {
                "title": "Previous",
                "description": "Previously elected committee",
                "allOf": [
                  {
                    "$ref": "#/definitions/ElectedCommittee"
                  }
                ]
              },
              "current": {
                "title": "Current",
                "description": "Currently elected committee, same schema as previous",
                "allOf": [
                  {
                    "$ref": "#/definitions/ElectedCommittee"
                  }
                ]
              }
            },
            "required": [
              "previous",
              "current"
            ]
          }
        }
      },
      "GetCXReceiptByHashRequest": {
        "title": "GetCXReceiptByHashRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getCXReceiptByHash",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "GetCXReceiptByHashResponse": {
        "title": "GetCXReceiptByHashResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "CXReceipt Object",
            "allOf": [
              {
                "$ref": "#/definitions/CXReceipt"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "CXReceipt": {
            "title": "CXReceipt",
            "type": "object",
            "properties": {
              "blockHash": {
                "title": "Blockhash",
                "description": "Block hash",
                "type": "string"
              },
              "blockNumber": {
                "title": "Blocknumber",
                "description": "Block number",
                "type": "integer"
              },
              "hash": {
                "title": "Hash",
                "description": "Transaction hash",
                "type": "string"
              },
              "from": {
                "title": "From",
                "description": "Sender wallet address",
                "type": "string"
              },
              "to": {
                "title": "To",
                "description": "Receiver wallet address",
                "type": "string"
              },
              "shardID": {
                "title": "Shardid",
                "description": "From shard",
                "type": "integer"
              },
              "toShardID": {
                "title": "Toshardid",
                "description": "To shard",
                "type": "integer"
              },
              "value": {
                "title": "Value",
                "description": "Ammount transferred in Atto",
                "type": "integer"
              }
            },
            "required": [
              "blockHash",
              "blockNumber",
              "hash",
              "from",
              "to",
              "shardID",
              "toShardID",
              "value"
            ]
          }
        }
      },
      "GetPendingCXReceiptsRequest": {
        "title": "GetPendingCXReceiptsRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getPendingCXReceipts",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetPendingCXReceiptsResponse": {
        "title": "GetPendingCXReceiptsResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of PendingCXReceipt object",
            "type": "array",
            "items": {
              "$ref": "#/definitions/PendingCXReceipt"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "Receipt": {
            "title": "Receipt",
            "type": "object",
            "properties": {
              "txHash": {
                "title": "Txhash",
                "description": "Transaction hash",
                "type": "string"
              },
              "from": {
                "title": "From",
                "description": "Sender wallet address",
                "type": "string"
              },
              "to": {
                "title": "To",
                "description": "Receiver wallet address",
                "type": "string"
              },
              "shardID": {
                "title": "Shardid",
                "description": "From shard",
                "type": "integer"
              },
              "toShardID": {
                "title": "Toshardid",
                "description": "To shard",
                "type": "integer"
              },
              "amount": {
                "title": "Amount",
                "description": "Amount transferred in Atto",
                "type": "integer"
              }
            },
            "required": [
              "txHash",
              "from",
              "to",
              "shardID",
              "toShardID",
              "amount"
            ]
          },
          "MerkleProof": {
            "title": "MerkleProof",
            "type": "object",
            "properties": {
              "blockNumber": {
                "title": "Blocknumber",
                "description": "Block number",
                "type": "integer"
              },
              "blockHash": {
                "title": "Blockhash",
                "description": "Block hash",
                "type": "string"
              },
              "shardID": {
                "title": "Shardid",
                "description": "Shard ID of orginiating block",
                "type": "integer"
              },
              "receiptHash": {
                "title": "Receipthash",
                "description": "Transaction receipt hash",
                "type": "string"
              },
              "shardIDs": {
                "title": "Shardids",
                "description": "To shard",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "shardHashed": {
                "title": "Shardhashed",
                "description": "Missing desc",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "blockNumber",
              "blockHash",
              "shardID",
              "receiptHash",
              "shardIDs",
              "shardHashed"
            ]
          },
          "BlockHeader": {
            "title": "BlockHeader",
            "type": "object",
            "properties": {
              "shard-id": {
                "title": "Shard-Id",
                "description": "Shard ID",
                "type": "integer"
              },
              "block-header-hash": {
                "title": "Block-Header-Hash",
                "description": "Block header hash",
                "type": "string"
              },
              "block-number": {
                "title": "Block-Number",
                "description": "Block number",
                "type": "integer"
              },
              "view-id": {
                "title": "View-Id",
                "description": "View ID",
                "type": "integer"
              },
              "epoch": {
                "title": "Epoch",
                "description": "Epoch number",
                "type": "integer"
              }
            },
            "required": [
              "shard-id",
              "block-header-hash",
              "block-number",
              "view-id",
              "epoch"
            ]
          },
          "PendingCXReceipt": {
            "title": "PendingCXReceipt",
            "type": "object",
            "properties": {
              "receipts": {
                "title": "Receipts",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Receipt"
                }
              },
              "merkleProof": {
                "$ref": "#/definitions/MerkleProof"
              },
              "header": {
                "$ref": "#/definitions/BlockHeader"
              },
              "commitSig": {
                "title": "Commitsig",
                "description": "Hex representation of aggregated signature",
                "type": "string"
              },
              "commitBitMap": {
                "title": "Commitbitmap",
                "description": "Hex representation of aggregated signature bitmap",
                "type": "string"
              }
            },
            "required": [
              "receipts",
              "merkleProof",
              "header",
              "commitSig",
              "commitBitMap"
            ]
          }
        }
      },
      "ResendCXRequest": {
        "title": "ResendCXRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_resendCx",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "ResendCXResponse": {
        "title": "ResendCXResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "If cross shard receipt was successfully resent or not",
            "type": "boolean"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetPoolStatsRequest": {
        "title": "GetPoolStatsRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getPoolStats",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetPoolStatsResponse": {
        "title": "GetPoolStatsResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "PoolStats Object",
            "allOf": [
              {
                "$ref": "#/definitions/PoolStats"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "PoolStats": {
            "title": "PoolStats",
            "type": "object",
            "properties": {
              "executable-count": {
                "title": "Executable-Count",
                "description": "Staking transaction hash",
                "type": "string"
              },
              "non-executable-count": {
                "title": "Non-Executable-Count",
                "description": "Type of staking transaction",
                "type": "string"
              }
            },
            "required": [
              "executable-count",
              "non-executable-count"
            ]
          }
        }
      },
      "PendingStakingTransactionsRequest": {
        "title": "PendingStakingTransactionsRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getPendingStakingTransactions",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StakingTransactionListResponse": {
        "title": "StakingTransactionListResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of staking transactions",
            "type": "array",
            "items": {
              "$ref": "#/definitions/StakingTransaction"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "StakingTransaction": {
            "title": "StakingTransaction",
            "type": "object",
            "properties": {
              "blockHash": {
                "title": "Blockhash",
                "description": "Block hash in which transaction was finalized",
                "type": "string"
              },
              "blockNumber": {
                "title": "Blocknumber",
                "description": "Block number in which transaction was finalized",
                "type": "integer"
              },
              "from": {
                "title": "From",
                "description": "Sender wallet address",
                "type": "string"
              },
              "timestamp": {
                "title": "Timestamp",
                "description": "Unix time at which transaction was finalized",
                "type": "integer"
              },
              "gas": {
                "title": "Gas",
                "description": "Gas limit of transaction",
                "type": "integer"
              },
              "gasPrice": {
                "title": "Gasprice",
                "description": "Gas price of transaction in Atto",
                "type": "integer"
              },
              "nonce": {
                "title": "Nonce",
                "description": "Wallet nonce of transaction",
                "type": "integer"
              },
              "transactionIndex": {
                "title": "Transactionindex",
                "description": "Staking transaction index within block",
                "type": "integer"
              },
              "type": {
                "title": "Type",
                "description": "Type of staking transaction",
                "type": "string"
              },
              "msg": {
                "title": "Msg",
                "description": "Staking transaction data, depending on the type of staking transaction",
                "type": "object"
              }
            },
            "required": [
              "blockHash",
              "from",
              "timestamp",
              "gas",
              "gasPrice",
              "nonce",
              "transactionIndex",
              "type",
              "msg"
            ]
          }
        }
      },
      "PendingTransactionsRequest": {
        "title": "PendingTransactionsRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_pendingTransactions",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TransactionListResponse": {
        "title": "TransactionListResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of transactions",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "Transaction": {
            "title": "Transaction",
            "type": "object",
            "properties": {
              "blockHash": {
                "title": "Blockhash",
                "description": "Block hash",
                "type": "string"
              },
              "blockNumber": {
                "title": "Blocknumber",
                "description": "Block number",
                "type": "integer"
              },
              "from": {
                "title": "From",
                "description": "Sender wallet address",
                "type": "string"
              },
              "timestamp": {
                "title": "Timestamp",
                "description": "Unix time at which transaction was finalized",
                "type": "integer"
              },
              "gas": {
                "title": "Gas",
                "description": "Gas limit of transaction",
                "type": "integer"
              },
              "gasPrice": {
                "title": "Gasprice",
                "description": "Gas price of transaction in Atto",
                "type": "integer"
              },
              "hash": {
                "title": "Hash",
                "description": "Transaction hash",
                "type": "string"
              },
              "input": {
                "title": "Input",
                "description": "Transaction data, used for smart contracts",
                "type": "string"
              },
              "nonce": {
                "title": "Nonce",
                "description": "Sender wallet nonce of transaction",
                "type": "integer"
              },
              "to": {
                "title": "To",
                "description": "Receiver wallet address",
                "type": "string"
              },
              "transactionIndex": {
                "title": "Transactionindex",
                "description": "transaction index within block",
                "type": "integer"
              },
              "value": {
                "title": "Value",
                "description": "Amount transferred",
                "type": "integer"
              },
              "shardID": {
                "title": "Shardid",
                "description": "From shard",
                "type": "integer"
              },
              "toShardID": {
                "title": "Toshardid",
                "description": "To shard",
                "type": "integer"
              }
            },
            "required": [
              "blockHash",
              "from",
              "timestamp",
              "gas",
              "gasPrice",
              "hash",
              "input",
              "nonce",
              "to",
              "transactionIndex",
              "value",
              "shardID",
              "toShardID"
            ]
          }
        }
      },
      "GetCurrentStakingErrorSinkRequest": {
        "title": "GetCurrentStakingErrorSinkRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getCurrentStakingErrorSink",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetCurrentStakingErrorSinkResponse": {
        "title": "GetCurrentStakingErrorSinkResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of StakingError objects",
            "type": "array",
            "items": {
              "$ref": "#/definitions/StakingError"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "StakingError": {
            "title": "StakingError",
            "type": "object",
            "properties": {
              "tx-hash-id": {
                "title": "Tx-Hash-Id",
                "description": "Staking transaction hash",
                "type": "string"
              },
              "directive-kind": {
                "title": "Directive-Kind",
                "description": "Type of staking transaction",
                "type": "string"
              },
              "time-at-rejection": {
                "title": "Time-At-Rejection",
                "description": "Unix time when the staking transaction was rejected from the pool",
                "type": "integer"
              },
              "error-message": {
                "title": "Error-Message",
                "description": "Reason for staking transaction rejection",
                "type": "string"
              }
            },
            "required": [
              "tx-hash-id",
              "directive-kind",
              "time-at-rejection",
              "error-message"
            ]
          }
        }
      },
      "GetStakingTransactionByBlockNumberAndIndexRequest": {
        "title": "GetStakingTransactionByBlockNumberAndIndexRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getStakingTransactionByBlockNumberAndIndex",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "StakingTransactionResponse": {
        "title": "StakingTransactionResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "StakingTransaction Object",
            "allOf": [
              {
                "$ref": "#/definitions/StakingTransaction"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "StakingTransaction": {
            "title": "StakingTransaction",
            "type": "object",
            "properties": {
              "blockHash": {
                "title": "Blockhash",
                "description": "Block hash in which transaction was finalized",
                "type": "string"
              },
              "blockNumber": {
                "title": "Blocknumber",
                "description": "Block number in which transaction was finalized",
                "type": "integer"
              },
              "from": {
                "title": "From",
                "description": "Sender wallet address",
                "type": "string"
              },
              "timestamp": {
                "title": "Timestamp",
                "description": "Unix time at which transaction was finalized",
                "type": "integer"
              },
              "gas": {
                "title": "Gas",
                "description": "Gas limit of transaction",
                "type": "integer"
              },
              "gasPrice": {
                "title": "Gasprice",
                "description": "Gas price of transaction in Atto",
                "type": "integer"
              },
              "nonce": {
                "title": "Nonce",
                "description": "Wallet nonce of transaction",
                "type": "integer"
              },
              "transactionIndex": {
                "title": "Transactionindex",
                "description": "Staking transaction index within block",
                "type": "integer"
              },
              "type": {
                "title": "Type",
                "description": "Type of staking transaction",
                "type": "string"
              },
              "msg": {
                "title": "Msg",
                "description": "Staking transaction data, depending on the type of staking transaction",
                "type": "object"
              }
            },
            "required": [
              "blockHash",
              "from",
              "timestamp",
              "gas",
              "gasPrice",
              "nonce",
              "transactionIndex",
              "type",
              "msg"
            ]
          }
        }
      },
      "GetStakingTransactionByBlockHashAndIndexRequest": {
        "title": "GetStakingTransactionByBlockHashAndIndexRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getStakingTransactionByBlockHashAndIndex",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "GetStakingTransactionByHashRequest": {
        "title": "GetStakingTransactionByHashRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getStakingTransactionByHash",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "SendRawStakingTransactionRequest": {
        "title": "SendRawStakingTransactionRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_sendRawStakingTransaction",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "SendRawStakingTransactionResponse": {
        "title": "SendRawStakingTransactionResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Staking transaction hash if it was successfully added, else an erro",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetCurrentTransactionErrorSinkRequest": {
        "title": "GetCurrentTransactionErrorSinkRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getCurrentTransactionErrorSinkRequest",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetCurrentTransactionErrorSinkResponse": {
        "title": "GetCurrentTransactionErrorSinkResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Object",
            "type": "array",
            "items": {
              "$ref": "#/definitions/TransactionError"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "TransactionError": {
            "title": "TransactionError",
            "type": "object",
            "properties": {
              "tx-hash-id": {
                "title": "Tx-Hash-Id",
                "description": "Transaction hash",
                "type": "string"
              },
              "time-at-rejection": {
                "title": "Time-At-Rejection",
                "description": "Unix time when the transaction was rejected from the pool",
                "type": "integer"
              },
              "error-message": {
                "title": "Error-Message",
                "description": "Reason for  transaction rejection",
                "type": "string"
              }
            },
            "required": [
              "tx-hash-id",
              "time-at-rejection",
              "error-message"
            ]
          }
        }
      },
      "GetTransactionByBlockHashAndIndexRequest": {
        "title": "GetTransactionByBlockHashAndIndexRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getTransactionByBlockHashAndIndex",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "TransactionResponse": {
        "title": "TransactionResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Transaction Object",
            "allOf": [
              {
                "$ref": "#/definitions/Transaction"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "Transaction": {
            "title": "Transaction",
            "type": "object",
            "properties": {
              "blockHash": {
                "title": "Blockhash",
                "description": "Block hash",
                "type": "string"
              },
              "blockNumber": {
                "title": "Blocknumber",
                "description": "Block number",
                "type": "integer"
              },
              "from": {
                "title": "From",
                "description": "Sender wallet address",
                "type": "string"
              },
              "timestamp": {
                "title": "Timestamp",
                "description": "Unix time at which transaction was finalized",
                "type": "integer"
              },
              "gas": {
                "title": "Gas",
                "description": "Gas limit of transaction",
                "type": "integer"
              },
              "gasPrice": {
                "title": "Gasprice",
                "description": "Gas price of transaction in Atto",
                "type": "integer"
              },
              "hash": {
                "title": "Hash",
                "description": "Transaction hash",
                "type": "string"
              },
              "input": {
                "title": "Input",
                "description": "Transaction data, used for smart contracts",
                "type": "string"
              },
              "nonce": {
                "title": "Nonce",
                "description": "Sender wallet nonce of transaction",
                "type": "integer"
              },
              "to": {
                "title": "To",
                "description": "Receiver wallet address",
                "type": "string"
              },
              "transactionIndex": {
                "title": "Transactionindex",
                "description": "transaction index within block",
                "type": "integer"
              },
              "value": {
                "title": "Value",
                "description": "Amount transferred",
                "type": "integer"
              },
              "shardID": {
                "title": "Shardid",
                "description": "From shard",
                "type": "integer"
              },
              "toShardID": {
                "title": "Toshardid",
                "description": "To shard",
                "type": "integer"
              }
            },
            "required": [
              "blockHash",
              "from",
              "timestamp",
              "gas",
              "gasPrice",
              "hash",
              "input",
              "nonce",
              "to",
              "transactionIndex",
              "value",
              "shardID",
              "toShardID"
            ]
          }
        }
      },
      "GetTransactionByBlockNumberAndIndexRequest": {
        "title": "GetTransactionByBlockNumberAndIndexRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getTransactionByBlockNumberAndIndex",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "GetTransactionByHashRequest": {
        "title": "GetTransactionByHashRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getTransactionByHash",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "GetTransactionReceiptRequest": {
        "title": "GetTransactionReceiptRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getTransactionReceipt",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "GetTransactionReceiptResponse": {
        "title": "GetTransactionReceiptResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Object",
            "allOf": [
              {
                "$ref": "#/definitions/TransactionReceipt"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "TransactionReceipt": {
            "title": "TransactionReceipt",
            "type": "object",
            "properties": {
              "blockHash": {
                "title": "Blockhash",
                "description": "Block hash",
                "type": "string"
              },
              "blockNumber": {
                "title": "Blocknumber",
                "description": "Block number",
                "type": "integer"
              },
              "contractAddress": {
                "title": "Contractaddress",
                "description": "Smart contract address",
                "type": "string"
              },
              "culmulativeGasUsed": {
                "title": "Culmulativegasused",
                "description": "Gas used for transaction",
                "type": "integer"
              },
              "from": {
                "title": "From",
                "description": "Sender wallet address",
                "type": "string"
              },
              "gasUsed": {
                "title": "Gasused",
                "description": "Gas used for the transaction",
                "type": "integer"
              },
              "logs": {
                "title": "Logs",
                "description": "Array",
                "type": "array",
                "items": {}
              },
              "logsBloom": {
                "title": "Logsbloom",
                "description": "Bloom logs",
                "type": "string"
              },
              "shardID": {
                "title": "Shardid",
                "description": "Shard ID",
                "type": "integer"
              },
              "status": {
                "title": "Status",
                "description": "Status of transaction (0: pending, 1: success)",
                "type": "integer"
              },
              "to": {
                "title": "To",
                "description": "Receiver wallet address",
                "type": "string"
              },
              "transactionHash": {
                "title": "Transactionhash",
                "description": "Transaction hash",
                "type": "string"
              },
              "transactionIndex": {
                "title": "Transactionindex",
                "description": "Transaction index within block",
                "type": "string"
              }
            },
            "required": [
              "blockHash",
              "blockNumber",
              "contractAddress",
              "culmulativeGasUsed",
              "from",
              "gasUsed",
              "logs",
              "logsBloom",
              "shardID",
              "status",
              "to",
              "transactionHash",
              "transactionIndex"
            ]
          }
        }
      },
      "SendRawTransactionRequest": {
        "title": "SendRawTransactionRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_sendRawTransaction",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "SendRawTransactionResponse": {
        "title": "SendRawTransactionResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Transaction hash",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "BlockNumberRequest": {
        "title": "BlockNumberRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_blockNumber",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BlockNumberResponse": {
        "title": "BlockNumberResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Current block number",
            "type": "integer"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetCirculatingSupplyRequest": {
        "title": "GetCirculatingSupplyRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getCirculatingSupply",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetCirculatingSupplyResponse": {
        "title": "GetCirculatingSupplyResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Circulation supply of tokens in ONE",
            "type": "number"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetEpochRequest": {
        "title": "GetEpochRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getEpoch",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetEpochResponse": {
        "title": "GetEpochResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Current block number",
            "type": "integer"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetLastCrossLinksRequest": {
        "title": "GetLastCrossLinksRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getLastCrossLinks",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetLastCrossLinksResponse": {
        "title": "GetLastCrossLinksResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of CrossLink objects",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CrossLink"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "CrossLink": {
            "title": "CrossLink",
            "type": "object",
            "properties": {
              "hash": {
                "title": "Hash",
                "description": "Parent block hash",
                "type": "string"
              },
              "block-number": {
                "title": "Block-Number",
                "description": "Block number",
                "type": "integer"
              },
              "view-id": {
                "title": "View-Id",
                "description": "View ID",
                "type": "integer"
              },
              "signature": {
                "title": "Signature",
                "description": "Hex representation of aggregated signature",
                "type": "string"
              },
              "signature-bitmap": {
                "title": "Signature-Bitmap",
                "description": "Hex representation of aggregated signature bitmap",
                "type": "string"
              },
              "shard-id": {
                "title": "Shard-Id",
                "description": "Shard ID",
                "type": "integer"
              },
              "epoch-number": {
                "title": "Epoch-Number",
                "description": "Block epoch",
                "type": "integer"
              }
            },
            "required": [
              "hash",
              "block-number",
              "view-id",
              "signature",
              "signature-bitmap",
              "shard-id",
              "epoch-number"
            ]
          }
        }
      },
      "GetLeaderRequest": {
        "title": "GetLeaderRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getLeader",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetLeaderResponse": {
        "title": "GetLeaderResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Wallet address of current leader",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GasPriceRequest": {
        "title": "GasPriceRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_gasPrice",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GasPriceResponse": {
        "title": "GasPriceResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Current average gas price of transactions",
            "type": "integer"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetShardingStructureRequest": {
        "title": "GetShardingStructureRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getShardingStructure",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetShardingStructureResponse": {
        "title": "GetShardingStructureResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of ShardingStructure Object",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ShardingStructure"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "ShardingStructure": {
            "title": "ShardingStructure",
            "type": "object",
            "properties": {
              "current": {
                "title": "Current",
                "description": "If this node is currently on this shard ID",
                "type": "boolean"
              },
              "http": {
                "title": "Http",
                "description": "HTTPS API endpoint for this shard ID",
                "type": "string"
              },
              "shardID": {
                "title": "Shardid",
                "description": "Shard ID",
                "type": "integer"
              },
              "ws": {
                "title": "Ws",
                "description": "Websocket API endpoint for this shard ID",
                "type": "string"
              }
            },
            "required": [
              "current",
              "http",
              "shardID",
              "ws"
            ]
          }
        }
      },
      "GetTotalSupplyRequest": {
        "title": "GetTotalSupplyRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getTotalSupply",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetTotalSupplyResponse": {
        "title": "GetTotalSupplyResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Total number of pre-mined tokens",
            "type": "number"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetValidatorsRequest": {
        "title": "GetValidatorsRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getValidators",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "GetValidatorsResponse": {
        "title": "GetValidatorsResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "ValidatorIDs Object",
            "allOf": [
              {
                "$ref": "#/definitions/ValidatorIDs"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "ValidatorAddress": {
            "title": "ValidatorAddress",
            "type": "object",
            "properties": {
              "address": {
                "title": "Address",
                "description": "Wallet address",
                "type": "string"
              },
              "balance": {
                "title": "Balance",
                "description": "Balance of wallet",
                "type": "integer"
              }
            },
            "required": [
              "address",
              "balance"
            ]
          },
          "ValidatorIDs": {
            "title": "ValidatorIDs",
            "type": "object",
            "properties": {
              "shardID": {
                "title": "Shardid",
                "description": "Shard ID",
                "type": "integer"
              },
              "validators": {
                "title": "Validators",
                "description": "Array of Validator Address objects",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ValidatorAddress"
                }
              }
            },
            "required": [
              "shardID",
              "validators"
            ]
          }
        }
      },
      "GetValidatorKeysRequest": {
        "title": "GetValidatorKeysRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getValidatorKeys",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "BLSKeyListResponse": {
        "title": "BLSKeyListResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of public BLS keys in the elected committee",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetCurrentBadBlocksRequest": {
        "title": "GetCurrentBadBlocksRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getCurrentBadBlocks",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetCurrentBadBlocksResponse": {
        "title": "GetCurrentBadBlocksResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of bad blocks in node memory. Note: know issue with RPC not returning correctly",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetNodeMetadataRequest": {
        "title": "GetNodeMetadataRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getNodeMetadata",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetNodeMetadataResponse": {
        "title": "GetNodeMetadataResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Node Metadata Object",
            "allOf": [
              {
                "$ref": "#/definitions/NodeMetadata"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "ChainConfig": {
            "title": "ChainConfig",
            "type": "object",
            "properties": {
              "chain-id": {
                "title": "Chain-Id",
                "description": "Chain ID for the network",
                "type": "integer"
              },
              "cross-tx-epoch": {
                "title": "Cross-Tx-Epoch",
                "description": "Epoch at which cross shard transactions were enabled",
                "type": "integer"
              },
              "cross-link-epoch": {
                "title": "Cross-Link-Epoch",
                "description": "Epoch at which cross links were enabled",
                "type": "integer"
              },
              "staking-epoch": {
                "title": "Staking-Epoch",
                "description": "Epoch at which staking was enabled",
                "type": "integer"
              },
              "prestaking-epoch": {
                "title": "Prestaking-Epoch",
                "description": "Epoch at which pre-staking began",
                "type": "integer"
              },
              "quick-unlock-epoch": {
                "title": "Quick-Unlock-Epoch",
                "description": "Epoch at which undelegations unlocked in one epoch",
                "type": "integer"
              },
              "eip155-epoch": {
                "title": "Eip155-Epoch",
                "description": "Epoch at which EIP155 was enabled",
                "type": "integer"
              },
              "s3-epoch": {
                "title": "S3-Epoch",
                "description": "Epoch at which Mainnet V0 was launched",
                "type": "integer"
              },
              "receipt-log-epoch": {
                "title": "Receipt-Log-Epoch",
                "description": "Epoch at which receipt logs were enabled",
                "type": "integer"
              }
            },
            "required": [
              "chain-id",
              "cross-tx-epoch",
              "cross-link-epoch",
              "staking-epoch",
              "prestaking-epoch",
              "quick-unlock-epoch",
              "eip155-epoch",
              "s3-epoch",
              "receipt-log-epoch"
            ]
          },
          "P2PConnectivity": {
            "title": "P2PConnectivity",
            "type": "object",
            "properties": {
              "total-known-peers": {
                "title": "Total-Known-Peers",
                "description": "Number of known peers",
                "type": "integer"
              },
              "connected": {
                "title": "Connected",
                "description": "Number of connected peers",
                "type": "integer"
              },
              "not-connected": {
                "title": "Not-Connected",
                "description": "Number of known peers not connected",
                "type": "integer"
              }
            },
            "required": [
              "total-known-peers",
              "connected",
              "not-connected"
            ]
          },
          "NodeMetadata": {
            "title": "NodeMetadata",
            "type": "object",
            "properties": {
              "blskey": {
                "title": "Blskey",
                "description": "List of BLS keys on the node",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "version": {
                "title": "Version",
                "description": "Harmony binary version",
                "type": "string"
              },
              "network": {
                "title": "Network",
                "description": "Network name that the node is on (Mainnet ir Testnet)",
                "type": "string"
              },
              "chain-config": {
                "title": "Chain-Config",
                "description": "ChainConfig Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/ChainConfig"
                  }
                ]
              },
              "is-leader": {
                "title": "Is-Leader",
                "description": "Whether the node is currently leader or not",
                "type": "boolean"
              },
              "shard-id": {
                "title": "Shard-Id",
                "description": "Shard that the node is on",
                "type": "integer"
              },
              "current-epoch": {
                "title": "Current-Epoch",
                "description": "Current epoch",
                "type": "integer"
              },
              "blocks-per-epoch": {
                "title": "Blocks-Per-Epoch",
                "description": "Number of blacks per epoch (only available on Shard 0)",
                "type": "integer"
              },
              "role": {
                "title": "Role",
                "description": "Node type (Validator or ExplorerNode)",
                "type": "string"
              },
              "dns-zone": {
                "title": "Dns-Zone",
                "description": "Name of DNS zone",
                "type": "string"
              },
              "is-archival": {
                "title": "Is-Archival",
                "description": "Whether the node is currently in state pruning mode or not",
                "type": "boolean"
              },
              "node-unix-start-time": {
                "title": "Node-Unix-Start-Time",
                "description": "Start time of node in Unix time",
                "type": "integer"
              },
              "p2p-connectivity": {
                "title": "P2P-Connectivity",
                "description": "P2PConnectivity Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/P2PConnectivity"
                  }
                ]
              }
            },
            "required": [
              "blskey",
              "version",
              "network",
              "chain-config",
              "is-leader",
              "shard-id",
              "current-epoch",
              "blocks-per-epoch",
              "role",
              "dns-zone",
              "is-archival",
              "node-unix-start-time",
              "p2p-connectivity"
            ]
          }
        }
      },
      "ProtocolVersionRequest": {
        "title": "ProtocolVersionRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_protocolVersion",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProtocolVersionResponse": {
        "title": "ProtocolVersionResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Protocol version",
            "type": "integer"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "PeerCountRequest": {
        "title": "PeerCountRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "net_peerCount",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PeerCountResponse": {
        "title": "PeerCountResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Number of peers respresented as a Hex string",
            "type": "string"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetBlocksRequest": {
        "title": "GetBlocksRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getBlocks",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              },
              {
                "$ref": "#/definitions/BlocksListConfig"
              }
            ]
          }
        },
        "required": [
          "params"
        ],
        "definitions": {
          "BlocksListConfig": {
            "title": "BlocksListConfig",
            "type": "object",
            "properties": {
              "withSigners": {
                "title": "Withsigners",
                "description": "Include block signer wallet addresses",
                "type": "boolean"
              },
              "fullTx": {
                "title": "Fulltx",
                "description": "Include full transaction data",
                "type": "boolean"
              },
              "inclStaking": {
                "title": "Inclstaking",
                "description": "Include full staking transactions",
                "type": "boolean"
              }
            },
            "required": [
              "withSigners",
              "fullTx",
              "inclStaking"
            ]
          }
        }
      },
      "BlockListResponse": {
        "title": "BlockListResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of blocks",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Block"
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "Block": {
            "title": "Block",
            "type": "object",
            "properties": {
              "difficulty": {
                "title": "Difficulty",
                "description": "Unused, legacy from Eth",
                "type": "integer"
              },
              "epoch": {
                "title": "Epoch",
                "description": "Epoch number of block",
                "type": "integer"
              },
              "extraData": {
                "title": "Extradata",
                "description": "Hex representation of extra data in the block",
                "type": "string"
              },
              "gasLimit": {
                "title": "Gaslimit",
                "description": "Maximum gas that can be used for transactions in the block",
                "type": "integer"
              },
              "gasUsed": {
                "title": "Gasused",
                "description": "Amount of gas used for transactions in the block",
                "type": "integer"
              },
              "hash": {
                "title": "Hash",
                "description": "Block hash",
                "type": "string"
              },
              "logsBloom": {
                "title": "Logsbloom",
                "description": "Bloom logs",
                "type": "string"
              },
              "miner": {
                "title": "Miner",
                "description": "Wallet address of the leader that proposed this block",
                "type": "string"
              },
              "mixHash": {
                "title": "Mixhash",
                "description": "Unused, legacy from Eth",
                "type": "string"
              },
              "nonce": {
                "title": "Nonce",
                "description": "Unused, legacy from Eth",
                "type": "integer"
              },
              "number": {
                "title": "Number",
                "description": "Block number",
                "type": "integer"
              },
              "parentHash": {
                "title": "Parenthash",
                "description": "Hash of parent block",
                "type": "string"
              },
              "receiptsRoot": {
                "title": "Receiptsroot",
                "description": "Hash of transaction receipt root",
                "type": "string"
              },
              "size": {
                "title": "Size",
                "description": "Block size in bytes",
                "type": "integer"
              },
              "stakingTransactions": {
                "title": "Stakingtransactions",
                "description": "List of staking transactions finalized in this block",
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "stateRoot": {
                "title": "Stateroot",
                "description": "Hash of state root",
                "type": "string"
              },
              "timestamp": {
                "title": "Timestamp",
                "description": "Unix timestamp of the block",
                "type": "integer"
              },
              "transactions": {
                "title": "Transactions",
                "description": "List of transactions finalized in this block",
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "transactionsRoot": {
                "title": "Transactionsroot",
                "description": "Hash of transactios root",
                "type": "string"
              },
              "uncles": {
                "title": "Uncles",
                "description": "Unused, legacy from Eth",
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "viewID": {
                "title": "Viewid",
                "description": "View ID",
                "type": "integer"
              }
            },
            "required": [
              "difficulty",
              "epoch",
              "extraData",
              "gasLimit",
              "gasUsed",
              "hash",
              "logsBloom",
              "miner",
              "mixHash",
              "nonce",
              "number",
              "parentHash",
              "receiptsRoot",
              "size",
              "stakingTransactions",
              "stateRoot",
              "timestamp",
              "transactions",
              "transactionsRoot",
              "uncles",
              "viewID"
            ]
          }
        }
      },
      "GetBlockByNumberRequest": {
        "title": "GetBlockByNumberRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getBlockByNumber",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/definitions/BlockConfig"
              }
            ]
          }
        },
        "required": [
          "params"
        ],
        "definitions": {
          "BlockConfig": {
            "title": "BlockConfig",
            "type": "object",
            "properties": {
              "fullTx": {
                "title": "Fulltx",
                "description": "Include full transaction data",
                "type": "boolean"
              },
              "inclTx": {
                "title": "Incltx",
                "description": "Include regular transactions",
                "type": "boolean"
              },
              "inclStaking": {
                "title": "Inclstaking",
                "description": "Include full staking transactions",
                "type": "boolean"
              }
            },
            "required": [
              "fullTx",
              "inclTx",
              "inclStaking"
            ]
          }
        }
      },
      "BlockResponse": {
        "title": "BlockResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Block Object",
            "allOf": [
              {
                "$ref": "#/definitions/Block"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "Block": {
            "title": "Block",
            "type": "object",
            "properties": {
              "difficulty": {
                "title": "Difficulty",
                "description": "Unused, legacy from Eth",
                "type": "integer"
              },
              "epoch": {
                "title": "Epoch",
                "description": "Epoch number of block",
                "type": "integer"
              },
              "extraData": {
                "title": "Extradata",
                "description": "Hex representation of extra data in the block",
                "type": "string"
              },
              "gasLimit": {
                "title": "Gaslimit",
                "description": "Maximum gas that can be used for transactions in the block",
                "type": "integer"
              },
              "gasUsed": {
                "title": "Gasused",
                "description": "Amount of gas used for transactions in the block",
                "type": "integer"
              },
              "hash": {
                "title": "Hash",
                "description": "Block hash",
                "type": "string"
              },
              "logsBloom": {
                "title": "Logsbloom",
                "description": "Bloom logs",
                "type": "string"
              },
              "miner": {
                "title": "Miner",
                "description": "Wallet address of the leader that proposed this block",
                "type": "string"
              },
              "mixHash": {
                "title": "Mixhash",
                "description": "Unused, legacy from Eth",
                "type": "string"
              },
              "nonce": {
                "title": "Nonce",
                "description": "Unused, legacy from Eth",
                "type": "integer"
              },
              "number": {
                "title": "Number",
                "description": "Block number",
                "type": "integer"
              },
              "parentHash": {
                "title": "Parenthash",
                "description": "Hash of parent block",
                "type": "string"
              },
              "receiptsRoot": {
                "title": "Receiptsroot",
                "description": "Hash of transaction receipt root",
                "type": "string"
              },
              "size": {
                "title": "Size",
                "description": "Block size in bytes",
                "type": "integer"
              },
              "stakingTransactions": {
                "title": "Stakingtransactions",
                "description": "List of staking transactions finalized in this block",
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "stateRoot": {
                "title": "Stateroot",
                "description": "Hash of state root",
                "type": "string"
              },
              "timestamp": {
                "title": "Timestamp",
                "description": "Unix timestamp of the block",
                "type": "integer"
              },
              "transactions": {
                "title": "Transactions",
                "description": "List of transactions finalized in this block",
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "transactionsRoot": {
                "title": "Transactionsroot",
                "description": "Hash of transactios root",
                "type": "string"
              },
              "uncles": {
                "title": "Uncles",
                "description": "Unused, legacy from Eth",
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "viewID": {
                "title": "Viewid",
                "description": "View ID",
                "type": "integer"
              }
            },
            "required": [
              "difficulty",
              "epoch",
              "extraData",
              "gasLimit",
              "gasUsed",
              "hash",
              "logsBloom",
              "miner",
              "mixHash",
              "nonce",
              "number",
              "parentHash",
              "receiptsRoot",
              "size",
              "stakingTransactions",
              "stateRoot",
              "timestamp",
              "transactions",
              "transactionsRoot",
              "uncles",
              "viewID"
            ]
          }
        }
      },
      "GetBlockByHashRequest": {
        "title": "GetBlockByHashRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getBlockByHash",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/BlockConfig"
              }
            ]
          }
        },
        "required": [
          "params"
        ],
        "definitions": {
          "BlockConfig": {
            "title": "BlockConfig",
            "type": "object",
            "properties": {
              "fullTx": {
                "title": "Fulltx",
                "description": "Include full transaction data",
                "type": "boolean"
              },
              "inclTx": {
                "title": "Incltx",
                "description": "Include regular transactions",
                "type": "boolean"
              },
              "inclStaking": {
                "title": "Inclstaking",
                "description": "Include full staking transactions",
                "type": "boolean"
              }
            },
            "required": [
              "fullTx",
              "inclTx",
              "inclStaking"
            ]
          }
        }
      },
      "GetBlockSignersRequest": {
        "title": "GetBlockSignersRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getBlockSigners",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              },
              {
                "$ref": "#/definitions/BlocksListConfig"
              }
            ]
          }
        },
        "required": [
          "params"
        ],
        "definitions": {
          "BlocksListConfig": {
            "title": "BlocksListConfig",
            "type": "object",
            "properties": {
              "withSigners": {
                "title": "Withsigners",
                "description": "Include block signer wallet addresses",
                "type": "boolean"
              },
              "fullTx": {
                "title": "Fulltx",
                "description": "Include full transaction data",
                "type": "boolean"
              },
              "inclStaking": {
                "title": "Inclstaking",
                "description": "Include full staking transactions",
                "type": "boolean"
              }
            },
            "required": [
              "withSigners",
              "fullTx",
              "inclStaking"
            ]
          }
        }
      },
      "GetBlockSignersKeysRequest": {
        "title": "GetBlockSignersKeysRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getBlockSignersKeys",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "GetBlockTransactionCountByNumberRequest": {
        "title": "GetBlockTransactionCountByNumberRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getBlockTransactionCountByNumber",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "TransactionCountResponse": {
        "title": "TransactionCountResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Number of transactions",
            "type": "integer"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetBlockTransactionCountByHashRequest": {
        "title": "GetBlockTransactionCountByHashRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getBlockTransactionCountByHash",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "GetHeaderByNumberRequest": {
        "title": "GetHeaderByNumberRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getHeaderByNumber",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "HeaderResponse": {
        "title": "HeaderResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "header response",
            "allOf": [
              {
                "$ref": "#/definitions/Header"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "Header": {
            "title": "Header",
            "type": "object",
            "properties": {
              "blockHash": {
                "title": "Blockhash",
                "description": "Block hash",
                "type": "string"
              },
              "blockNumber": {
                "title": "Blocknumber",
                "description": "Block number",
                "type": "integer"
              },
              "shardID": {
                "title": "Shardid",
                "description": "Shard ID",
                "type": "integer"
              },
              "leader": {
                "title": "Leader",
                "description": "Wallet address of leader that proposed this block if prestaking, otherwise sha256 hash of leader's public bls key",
                "type": "string"
              },
              "viewID": {
                "title": "Viewid",
                "description": "View ID of the block",
                "type": "integer"
              },
              "epoch": {
                "title": "Epoch",
                "description": "Epoch of the block",
                "type": "integer"
              },
              "timestamp": {
                "title": "Timestamp",
                "description": "Timestamp that the block was finalized",
                "type": "string"
              },
              "unixtime": {
                "title": "Unixtime",
                "description": "Timestamp that the block was finalized in Unix time",
                "type": "integer"
              },
              "lastCommitSig": {
                "title": "Lastcommitsig",
                "description": "Hex representation of aggregated signatures of the previous block",
                "type": "string"
              },
              "lastCommitBitmap": {
                "title": "Lastcommitbitmap",
                "description": "Hex representation of the aggregated signature bitmap of the previous block",
                "type": "string"
              }
            },
            "required": [
              "blockHash",
              "blockNumber",
              "shardID",
              "leader",
              "viewID",
              "epoch",
              "timestamp",
              "unixtime",
              "lastCommitSig",
              "lastCommitBitmap"
            ]
          }
        }
      },
      "GetLatestChainHeadersRequest": {
        "title": "GetLatestChainHeadersRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getLatestChainHeaders",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetLatestChainHeadersResponse": {
        "title": "GetLatestChainHeadersResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "LatestChainHeaders Object",
            "allOf": [
              {
                "$ref": "#/definitions/LatestChainHeaders"
              }
            ]
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ],
        "definitions": {
          "ChainHeader": {
            "title": "ChainHeader",
            "type": "object",
            "properties": {
              "shard-id": {
                "title": "Shard-Id",
                "description": "Shard ID",
                "type": "integer"
              },
              "block-header-hash": {
                "title": "Block-Header-Hash",
                "description": "Block header hash",
                "type": "string"
              },
              "block-number": {
                "title": "Block-Number",
                "description": "Block number",
                "type": "integer"
              },
              "view-id": {
                "title": "View-Id",
                "description": "View ID",
                "type": "integer"
              },
              "epoch": {
                "title": "Epoch",
                "description": "Epoch number",
                "type": "integer"
              }
            },
            "required": [
              "shard-id",
              "block-header-hash",
              "block-number",
              "view-id",
              "epoch"
            ]
          },
          "LatestChainHeaders": {
            "title": "LatestChainHeaders",
            "type": "object",
            "properties": {
              "beacon-chain-header": {
                "title": "Beacon-Chain-Header",
                "description": "ChainHeader Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/ChainHeader"
                  }
                ]
              },
              "shard-chain-header": {
                "title": "Shard-Chain-Header",
                "description": "ChainHeader Object",
                "allOf": [
                  {
                    "$ref": "#/definitions/ChainHeader"
                  }
                ]
              }
            },
            "required": [
              "beacon-chain-header",
              "shard-chain-header"
            ]
          }
        }
      },
      "LatestHeaderRequest": {
        "title": "LatestHeaderRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_latestHeader",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "description": "An empty list with no parameters",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetBalanceRequest": {
        "title": "GetBalanceRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getBalance",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "params"
        ]
      },
      "BalanceResponse": {
        "title": "BalanceResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "Wallet balance at given block in Atto",
            "type": "integer"
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetBalanceByBlockNumberRequest": {
        "title": "GetBalanceByBlockNumberRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getBalanceByBlockNumber",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "GetStakingTransactionsCountRequest": {
        "title": "GetStakingTransactionsCountRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getStakingTransactionsCount",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "GetStakingTransactionsHistoryRequest": {
        "title": "GetStakingTransactionsHistoryRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getStakingTransactionsHistory",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "$ref": "#/definitions/TransactionsHistoryObject"
            }
          }
        },
        "required": [
          "params"
        ],
        "definitions": {
          "TransactionType": {
            "title": "TransactionType",
            "description": "An enumeration.",
            "enum": [
              "SENT",
              "RECEIVED",
              "ALL"
            ],
            "type": "string"
          },
          "SortOrder": {
            "title": "SortOrder",
            "description": "An enumeration.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string"
          },
          "TransactionsHistoryObject": {
            "title": "TransactionsHistoryObject",
            "type": "object",
            "properties": {
              "address": {
                "title": "Address",
                "description": "Wallet address",
                "type": "string"
              },
              "pageIndex": {
                "title": "Pageindex",
                "description": "Optional, which page ofo transactions to return, default 0",
                "default": 0,
                "type": "integer"
              },
              "pageSize": {
                "title": "Pagesize",
                "description": "Optional, how many transactions to display per page, default 1000",
                "default": 1000,
                "type": "integer"
              },
              "fullTx": {
                "title": "Fulltx",
                "description": "Optional, return full transaction data or just transaction hashes, default false",
                "default": false,
                "type": "boolean"
              },
              "txType": {
                "description": "Optional, which type of transactions to display ('ALL','RECEIVED', or 'SENT'), default 'ALL'",
                "default": "ALL",
                "allOf": [
                  {
                    "$ref": "#/definitions/TransactionType"
                  }
                ]
              },
              "order": {
                "description": "Optional, sort transactions in ascending or descending order based on timestamp ('ASC' or 'DESC'), default 'ASC'",
                "default": "ASC",
                "allOf": [
                  {
                    "$ref": "#/definitions/SortOrder"
                  }
                ]
              }
            },
            "required": [
              "address"
            ]
          }
        }
      },
      "TransactionsHashListResponse": {
        "title": "TransactionsHashListResponse",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The id of the request the response is in response to.",
            "type": "integer"
          },
          "result": {
            "title": "Result",
            "description": "List of transaction hashes",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "error": {
            "title": "Error",
            "description": "The error of the RPC call."
          }
        },
        "required": [
          "jsonrpc"
        ]
      },
      "GetTransactionsCountRequest": {
        "title": "GetTransactionsCountRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getTransactionsCount",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "params"
        ]
      },
      "GetTransactionsHistoryRequest": {
        "title": "GetTransactionsHistoryRequest",
        "type": "object",
        "properties": {
          "jsonrpc": {
            "title": "Jsonrpc",
            "description": "The JSON-RPC version.",
            "default": "2.0",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "description": "The request id, useful for asynchronous requests.",
            "default": 1,
            "type": "integer"
          },
          "method": {
            "title": "Method",
            "default": "hmyv2_getTransactionsHistory",
            "type": "string"
          },
          "params": {
            "title": "Params",
            "type": "array",
            "items": {
              "$ref": "#/definitions/TransactionsHistoryObject"
            }
          }
        },
        "required": [
          "params"
        ],
        "definitions": {
          "TransactionType": {
            "title": "TransactionType",
            "description": "An enumeration.",
            "enum": [
              "SENT",
              "RECEIVED",
              "ALL"
            ],
            "type": "string"
          },
          "SortOrder": {
            "title": "SortOrder",
            "description": "An enumeration.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string"
          },
          "TransactionsHistoryObject": {
            "title": "TransactionsHistoryObject",
            "type": "object",
            "properties": {
              "address": {
                "title": "Address",
                "description": "Wallet address",
                "type": "string"
              },
              "pageIndex": {
                "title": "Pageindex",
                "description": "Optional, which page ofo transactions to return, default 0",
                "default": 0,
                "type": "integer"
              },
              "pageSize": {
                "title": "Pagesize",
                "description": "Optional, how many transactions to display per page, default 1000",
                "default": 1000,
                "type": "integer"
              },
              "fullTx": {
                "title": "Fulltx",
                "description": "Optional, return full transaction data or just transaction hashes, default false",
                "default": false,
                "type": "boolean"
              },
              "txType": {
                "description": "Optional, which type of transactions to display ('ALL','RECEIVED', or 'SENT'), default 'ALL'",
                "default": "ALL",
                "allOf": [
                  {
                    "$ref": "#/definitions/TransactionType"
                  }
                ]
              },
              "order": {
                "description": "Optional, sort transactions in ascending or descending order based on timestamp ('ASC' or 'DESC'), default 'ASC'",
                "default": "ASC",
                "allOf": [
                  {
                    "$ref": "#/definitions/SortOrder"
                  }
                ]
              }
            },
            "required": [
              "address"
            ]
          }
        }
      }
    }
  }
}